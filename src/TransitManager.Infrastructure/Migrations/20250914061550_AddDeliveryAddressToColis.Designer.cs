// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TransitManager.Infrastructure.Data;

#nullable disable

namespace TransitManager.Infrastructure.Migrations
{
    [DbContext(typeof(TransitContext))]
    [Migration("20250914061550_AddDeliveryAddressToColis")]
    partial class AddDeliveryAddressToColis
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TransitManager.Core.Entities.AuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AdresseIP")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("Commentaires")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAction")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Entite")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("EntiteId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("UtilisateurId")
                        .HasColumnType("uuid");

                    b.Property<string>("ValeurApres")
                        .HasColumnType("text");

                    b.Property<string>("ValeurAvant")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UtilisateurId");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Barcode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Actif")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ColisId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("bytea");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("ColisId");

                    b.HasIndex("Value")
                        .IsUnique()
                        .HasFilter("\"Actif\" = true");

                    b.ToTable("Barcodes", (string)null);
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Actif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("AdresseLivraison")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("AdressePrincipale")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CodeClient")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("CodePostal")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Commentaires")
                        .HasColumnType("text");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateInscription")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<bool>("EstClientFidele")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<decimal>("Impayes")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("NombreConteneursUniques")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("NombreTotalEnvois")
                        .HasColumnType("integer");

                    b.Property<string>("NumeroPieceIdentite")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Pays")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasDefaultValue("France");

                    b.Property<string>("PieceIdentite")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<decimal>("PourcentageRemise")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("TelephonePrincipal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TelephoneSecondaire")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TypePieceIdentite")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Ville")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("VolumeTotalExpedié")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("CodeClient")
                        .IsUnique()
                        .HasDatabaseName("IX_Clients_CodeClient");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_Clients_Email");

                    b.HasIndex("TelephonePrincipal")
                        .HasDatabaseName("IX_Clients_TelephonePrincipal");

                    b.HasIndex("Nom", "Prenom")
                        .HasDatabaseName("IX_Clients_NomPrenom");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Colis", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Actif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("AdresseLivraison")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentaires")
                        .HasColumnType("text");

                    b.Property<Guid?>("ConteneurId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateArrivee")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDernierScan")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateLivraison")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Destinataire")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DestinationFinale")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("EstFragile")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Etat")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("HistoriqueScan")
                        .HasColumnType("jsonb");

                    b.Property<string>("InstructionsSpeciales")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("InventaireJson")
                        .HasColumnType("jsonb");

                    b.Property<bool>("LivraisonADomicile")
                        .HasColumnType("boolean");

                    b.Property<string>("LocalisationActuelle")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<bool>("ManipulationSpeciale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.Property<int>("NombrePieces")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<string>("NumeroPlomb")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NumeroReference")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Photos")
                        .HasColumnType("text");

                    b.Property<decimal>("PrixTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("SignatureReception")
                        .HasColumnType("text");

                    b.Property<decimal>("SommePayee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TelephoneDestinataire")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TypeEnvoi")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("ValeurDeclaree")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("Volume")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(0m);

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ConteneurId");

                    b.HasIndex("DateArrivee");

                    b.HasIndex("NumeroReference")
                        .IsUnique();

                    b.HasIndex("Statut");

                    b.ToTable("Colis", (string)null);
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Conteneur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Actif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Commentaires")
                        .HasColumnType("text");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateArriveeDestination")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateChargement")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateCloture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDedouanement")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDepart")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateReception")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.Property<string>("NomCompagnie")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NomTransitaire")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NumeroDossier")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("NumeroPlomb")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PaysDestination")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("NumeroDossier")
                        .IsUnique();

                    b.HasIndex("Statut");

                    b.ToTable("Conteneurs", (string)null);
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Document", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Actif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("CheminFichier")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColisId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ConteneurId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateDernierAcces")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("DocumentParentId")
                        .HasColumnType("uuid");

                    b.Property<bool>("EstArchive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("EstConfidentiel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("HashMd5")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("NomFichierOriginal")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("NombreTelechargements")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<Guid?>("PaiementId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Tags")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<long>("TailleFichier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasDefaultValue(0L);

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TypeMime")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("IX_Documents_ClientId");

                    b.HasIndex("ColisId")
                        .HasDatabaseName("IX_Documents_ColisId");

                    b.HasIndex("ConteneurId")
                        .HasDatabaseName("IX_Documents_ConteneurId");

                    b.HasIndex("DateCreation")
                        .HasDatabaseName("IX_Documents_DateCreation");

                    b.HasIndex("DocumentParentId");

                    b.HasIndex("EstArchive")
                        .HasDatabaseName("IX_Documents_EstArchive");

                    b.HasIndex("PaiementId")
                        .HasDatabaseName("IX_Documents_PaiementId");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Documents_Type");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Actif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("ActionParametre")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ActionUrl")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<DateTime?>("DateLecture")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EstLue")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.Property<string>("Priorite")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid?>("UtilisateurId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("DateCreation")
                        .HasDatabaseName("IX_Notifications_DateCreation");

                    b.HasIndex("EstLue")
                        .HasDatabaseName("IX_Notifications_EstLue");

                    b.HasIndex("Type")
                        .HasDatabaseName("IX_Notifications_Type");

                    b.HasIndex("UtilisateurId")
                        .HasDatabaseName("IX_Notifications_UtilisateurId");

                    b.HasIndex("UtilisateurId", "EstLue")
                        .HasDatabaseName("IX_Notifications_UtilisateurId_EstLue");

                    b.ToTable("Notifications", (string)null);
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Paiement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Actif")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Banque")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColisId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentaires")
                        .HasColumnType("text");

                    b.Property<Guid?>("ConteneurId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateDernierRappel")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateEcheance")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DatePaiement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Devise")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("EUR");

                    b.Property<Guid?>("FactureId")
                        .HasColumnType("uuid");

                    b.Property<string>("ModePaiement")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.Property<decimal>("Montant")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("NumeroRecu")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("RappelEnvoye")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("RecuScanne")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Reference")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("TauxChange")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)")
                        .HasDefaultValue(1m);

                    b.Property<Guid?>("VehiculeId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ClientId")
                        .HasDatabaseName("IX_Paiements_ClientId");

                    b.HasIndex("ColisId");

                    b.HasIndex("ConteneurId")
                        .HasDatabaseName("IX_Paiements_ConteneurId");

                    b.HasIndex("DatePaiement")
                        .HasDatabaseName("IX_Paiements_DatePaiement");

                    b.HasIndex("FactureId")
                        .HasDatabaseName("IX_Paiements_FactureId");

                    b.HasIndex("ModePaiement")
                        .HasDatabaseName("IX_Paiements_ModePaiement");

                    b.HasIndex("NumeroRecu")
                        .IsUnique()
                        .HasDatabaseName("IX_Paiements_NumeroRecu");

                    b.HasIndex("Statut")
                        .HasDatabaseName("IX_Paiements_Statut");

                    b.HasIndex("VehiculeId");

                    b.ToTable("Paiements", (string)null);
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Utilisateur", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Actif")
                        .HasColumnType("boolean");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateVerrouillage")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DerniereConnexion")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("DoitChangerMotDePasse")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<DateTime?>("ExpirationToken")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FuseauHoraire")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Langue")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.Property<string>("MotDePasseHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("NomUtilisateur")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<bool>("NotificationsActivees")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotificationsEmail")
                        .HasColumnType("boolean");

                    b.Property<bool>("NotificationsSMS")
                        .HasColumnType("boolean");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("text");

                    b.Property<string>("PermissionsSpecifiques")
                        .HasColumnType("text");

                    b.Property<string>("PhotoProfil")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Preferences")
                        .HasColumnType("text");

                    b.Property<string>("Prenom")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("bytea");

                    b.Property<string>("Telephone")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("TentativesConnexionEchouees")
                        .HasColumnType("integer");

                    b.Property<string>("Theme")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("TokenReinitialisation")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Utilisateurs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("00000000-0000-0000-0000-000000000001"),
                            Actif = true,
                            DateCreation = new DateTime(2025, 9, 14, 6, 15, 48, 922, DateTimeKind.Utc).AddTicks(6415),
                            DoitChangerMotDePasse = false,
                            Email = "admin@transitmanager.com",
                            FuseauHoraire = "Europe/Paris",
                            Langue = "fr-FR",
                            MotDePasseHash = "$2a$11$pTdOiicmME4EAKuc4aBQmOJIhqgHXmPYhQBzIViauCL2ggavYWYu.",
                            Nom = "Administrateur",
                            NomUtilisateur = "admin",
                            NotificationsActivees = true,
                            NotificationsEmail = true,
                            NotificationsSMS = false,
                            Prenom = "Système",
                            Role = 0,
                            TentativesConnexionEchouees = 0,
                            Theme = "Clair"
                        });
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Vehicule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("Actif")
                        .HasColumnType("boolean");

                    b.Property<int>("Annee")
                        .HasColumnType("integer");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<string>("Commentaires")
                        .HasColumnType("text");

                    b.Property<Guid?>("ConteneurId")
                        .HasColumnType("uuid");

                    b.Property<string>("CreePar")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreation")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DateModification")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Destinataire")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("DestinationFinale")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EtatDesLieux")
                        .HasColumnType("text");

                    b.Property<string>("EtatDesLieuxRayures")
                        .HasColumnType("text");

                    b.Property<string>("Immatriculation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Kilometrage")
                        .HasColumnType("integer");

                    b.Property<string>("Marque")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Modele")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ModifiePar")
                        .HasColumnType("text");

                    b.Property<string>("NumeroPlomb")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("PrixTotal")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("bytea");

                    b.Property<decimal>("SommePayee")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.Property<string>("Statut")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("TelephoneDestinataire")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal>("ValeurDeclaree")
                        .HasPrecision(18, 2)
                        .HasColumnType("numeric(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.HasIndex("ConteneurId");

                    b.HasIndex("Immatriculation")
                        .IsUnique();

                    b.HasIndex("Statut");

                    b.ToTable("Vehicules", (string)null);
                });

            modelBuilder.Entity("TransitManager.Core.Entities.AuditLog", b =>
                {
                    b.HasOne("TransitManager.Core.Entities.Utilisateur", "Utilisateur")
                        .WithMany("Audits")
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Barcode", b =>
                {
                    b.HasOne("TransitManager.Core.Entities.Colis", "Colis")
                        .WithMany("Barcodes")
                        .HasForeignKey("ColisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Colis");
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Colis", b =>
                {
                    b.HasOne("TransitManager.Core.Entities.Client", "Client")
                        .WithMany("Colis")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TransitManager.Core.Entities.Conteneur", "Conteneur")
                        .WithMany("Colis")
                        .HasForeignKey("ConteneurId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("Conteneur");
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Document", b =>
                {
                    b.HasOne("TransitManager.Core.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TransitManager.Core.Entities.Colis", "Colis")
                        .WithMany()
                        .HasForeignKey("ColisId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TransitManager.Core.Entities.Conteneur", "Conteneur")
                        .WithMany()
                        .HasForeignKey("ConteneurId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TransitManager.Core.Entities.Document", "DocumentParent")
                        .WithMany()
                        .HasForeignKey("DocumentParentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TransitManager.Core.Entities.Paiement", "Paiement")
                        .WithMany()
                        .HasForeignKey("PaiementId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("Colis");

                    b.Navigation("Conteneur");

                    b.Navigation("DocumentParent");

                    b.Navigation("Paiement");
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Notification", b =>
                {
                    b.HasOne("TransitManager.Core.Entities.Utilisateur", "Utilisateur")
                        .WithMany()
                        .HasForeignKey("UtilisateurId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Utilisateur");
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Paiement", b =>
                {
                    b.HasOne("TransitManager.Core.Entities.Client", "Client")
                        .WithMany("Paiements")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TransitManager.Core.Entities.Colis", "Colis")
                        .WithMany("Paiements")
                        .HasForeignKey("ColisId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("TransitManager.Core.Entities.Conteneur", "Conteneur")
                        .WithMany()
                        .HasForeignKey("ConteneurId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TransitManager.Core.Entities.Vehicule", "Vehicule")
                        .WithMany("Paiements")
                        .HasForeignKey("VehiculeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Client");

                    b.Navigation("Colis");

                    b.Navigation("Conteneur");

                    b.Navigation("Vehicule");
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Vehicule", b =>
                {
                    b.HasOne("TransitManager.Core.Entities.Client", "Client")
                        .WithMany("Vehicules")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TransitManager.Core.Entities.Conteneur", "Conteneur")
                        .WithMany("Vehicules")
                        .HasForeignKey("ConteneurId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Client");

                    b.Navigation("Conteneur");
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Client", b =>
                {
                    b.Navigation("Colis");

                    b.Navigation("Paiements");

                    b.Navigation("Vehicules");
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Colis", b =>
                {
                    b.Navigation("Barcodes");

                    b.Navigation("Paiements");
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Conteneur", b =>
                {
                    b.Navigation("Colis");

                    b.Navigation("Vehicules");
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Utilisateur", b =>
                {
                    b.Navigation("Audits");
                });

            modelBuilder.Entity("TransitManager.Core.Entities.Vehicule", b =>
                {
                    b.Navigation("Paiements");
                });
#pragma warning restore 612, 618
        }
    }
}
